# OH! Clam Maths Game
# Version 1.2
# Updated: 22/07/25
# Author: Naomi Ching

import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import random
import time
import os



def center_window(win, width, height):
    screen_width = root.winfo_screenwidth()
    screen_height =root.winfo_screenheight()
    
    x = (screen_width / 2) - (width / 2)
    y = (screen_height / 2) - (height / 2)
    win.geometry(f"{width}x{height}+{int(x)}+{int(y)}")

root = tk.Tk()
root.title("OH Clam!")
center_window(root, 400, 500)
root.resizable(False, False)

def quit_app():
    if messagebox.askokcancel("Quit", "Do you really want to quit?"):
        root.destroy()

def open_info():
    info_window = tk.Toplevel(root)
    info_window.title("About the Game")
    info_window.geometry("500x110+240+290")  
    info_window.resizable(False, False)

    # Create canvas sized to the window
    canvas = tk.Canvas(info_window, width=500, height=130)
    canvas.pack(fill="both", expand=True)

    # Load and display the background image
    bg_image = Image.open("bg_clams.png").resize((550, 500))
    bg_photo = ImageTk.PhotoImage(bg_image)
    canvas.create_image(0, 0, image=bg_photo, anchor="nw")

    # Save reference to avoid garbage collection
    info_window.bg_photo = bg_photo

    # Your message text, displayed on canvas
    message = (
        "OH!Clam is a fun maths game that focuses on substitution problems."
        " There are three difficulties to choose from: Easy, Medium and Hard."
        " Answer 10 questions as fast as you can to reach the clam! Have fun!ü¶¶"
    )
    # Create text on the canvas with a font and color that stands out
    canvas.create_text(
        10, 10,
        anchor="nw",
        text=message,
        font=("Segoe UI", 13),
        fill="Black",  
        width=480  # Wrap text nicely inside the canvas
    )
    
    quit_button = tk.Button(info_window, bg="#d1f3fc", text="Close", font=("Georgia", 9), command=info_window.destroy)
    quit_button.place(x=430, y=80)

def save_score(username, elapsed_time):
    with open("scoreboard.txt", "a") as file:
        file.write(f"{username},{elapsed_time:.1f}\n")

def open_scoreboard():
    scoreboard_window = tk.Toplevel(root)
    scoreboard_window.title("Leaderboard")
    scoreboard_window.geometry("500x300+1180+290") 
    scoreboard_window.resizable(False, False)

    canvas = tk.Canvas(scoreboard_window, width=500, height=300)
    canvas.pack(fill="both", expand=True)

    try:
        bg_image = Image.open("bg_clams.png").resize((500, 300))
        bg_photo = ImageTk.PhotoImage(bg_image)
        canvas.create_image(0, 0, image=bg_photo, anchor="nw")
        scoreboard_window.bg_photo = bg_photo
    except:
        pass

    canvas.create_text(130, 30, text="Username", font=("Segoe Print", 17, "bold"), fill="#24424c")
    canvas.create_text(350, 30, text="Time (s)", font=("Segoe Print", 17, "bold"), fill="#24424c")

    if os.path.exists("scoreboard.txt"):
        with open("scoreboard.txt", "r") as file:
            lines = file.readlines()
            scores = []
            for line in lines:
                try:
                    name, t = line.strip().split(",")
                    scores.append((name, float(t)))
                except:
                    continue
            scores.sort(key=lambda x: x[1])
            for i, (name, t) in enumerate(scores[:10]):
                canvas.create_text(130, 60 + i * 20, text=name, font=("Arial", 12), fill="#24424c")
                canvas.create_text(350, 60 + i * 20, text=f"{t:.1f}s", font=("Arial", 12), fill="#24424c")

    quit_button = tk.Button(scoreboard_window, bg="#d1f3fc", text="Close", font=("Georgia", 12), command=scoreboard_window.destroy)
    quit_button.place(x=400, y=260)

easy_questions = [
    ("What is 2x + 3 when x = {x}?", lambda x: 2 * x + 3),
    ("What is x¬≤ - 4 when x = {x}?", lambda x: x ** 2 - 4),
    ("What is 3x - 7 when x = {x}?", lambda x: 3 * x - 7),
    ("What is x¬≥ + 2 when x = {x}?", lambda x: x ** 3 + 2),
    ("What is 4x¬≤ - x when x = {x}?", lambda x: 4 * x ** 2 - x),
]

medium_questions = [
    ("What is 5x + 2 when x = {x}?", lambda x: 5 * x + 2),
    ("What is x¬≤ + x when x = {x}?", lambda x: x ** 2 + x),
    ("What is (x + 3) * 2 when x = {x}?", lambda x: (x + 3) * 2),
    ("What is (3x - 1) when x = {x}?", lambda x: 3 * x - 1),
    ("What is (x¬≤ - 1) when x = {x}?", lambda x: x ** 2 - 1),
]


hard_questions = [
    ("What is (x¬≥ + 2x¬≤ - x + 4) when x = {x}?", lambda x: x**3 + 2*x**2 - x + 4),
    ("What is ((3x¬≤ + 2x - 5) / (x + 1)) when x = {x}?", lambda x: (3*x**2 + 2*x - 5)/(x + 1) if x != -1 else float('inf')),
    ("What is (2x¬≥ - x¬≤ + 3x - 7) when x = {x}?", lambda x: 2*x**3 - x**2 + 3*x - 7),
    ("What is ((x - 2)(x¬≤ + 2x + 4)) when x = {x}?", lambda x: (x - 2)*(x**2 + 2*x + 4)),
    ("What is ((x + 1)¬≥ - x¬≥) when x = {x}?", lambda x: (x + 1)**3 - x**3),
]


def open_game_level(level_name, question_templates):
    username = entry.get().strip()
    if not username:
        messagebox.showerror("No Username", "Please enter a username to start.")
        return

    root.withdraw()
    game_window = tk.Toplevel(root)
    game_window.title(f"{level_name} Level")
    center_window(game_window, 900, 600)
    game_window.resizable(False, False)

    canvas = tk.Canvas(game_window, width=900, height=600)
    canvas.pack(fill="both", expand=True)

    bg_image = Image.open("painting_bg.png").resize((900, 600))
    bg_photo = ImageTk.PhotoImage(bg_image)
    canvas.create_image(0, 0, image=bg_photo, anchor="nw")
    game_window.bg_photo = bg_photo

    game_window.otter_swim_img = ImageTk.PhotoImage(Image.open("otter_swimming.png").resize((120, 120)))
    game_window.clam_img = ImageTk.PhotoImage(Image.open("clam.png").resize((120, 120)))
    game_window.otter_clam_img = ImageTk.PhotoImage(Image.open("otter_holding_clam.png").resize((200, 250)))

    otter_x = 50
    otter_y = 450
    otter_id = canvas.create_image(otter_x, otter_y, image=game_window.otter_swim_img, anchor="nw")
    clam_id = canvas.create_image(800, otter_y, image=game_window.clam_img, anchor="nw")

    def move_otter():
        nonlocal otter_x, otter_y
        otter_x += 75
        canvas.coords(otter_id, otter_x, otter_y)   

    start_time = time.time()
    stopwatch_id = canvas.create_text(450, 30, text="Time: 0.0s", font=("Arial", 18), fill="black")

    game_over = [False]
    correct_count = [0]

    feedback_id = canvas.create_text(450, 550, text="", font=("Arial", 18), fill="green")
    answer_buttons_frame = tk.Frame(game_window, bg="white")
    buttons_window = canvas.create_window(450, 350, window=answer_buttons_frame)
    question_window_id = [None]
    option_button_ids = []

    def generate_question():
        template, func = random.choice(question_templates)
        x = random.randint(1, 5)
        correct = func(x)
        correct_rounded = round(correct, 1) if isinstance(correct, float) else correct
        options = [correct_rounded]

        while len(options) < 4:
            difference = random.choice([-3, -2, -1, 1, 2, 3])
            wrong_answer = correct_rounded + difference
            if wrong_answer not in options:
                options.append(wrong_answer)

        random.shuffle(options)
            
        return {
            "question": template.format(x=x),
            "options": [str(round(opt, 1)) for opt in options],
            "answer": str(correct_rounded)
        }

    def check_answer(selected, correct):
        if game_over[0]:
            return
        if selected == correct:
            correct_count[0] += 1
            canvas.itemconfig(feedback_id, text="Correct!", fill="green")
            move_otter()
        else:
            canvas.itemconfig(feedback_id, text=f"Wrong! Answer was {correct}", fill="red")

        if correct_count[0] >= 10:
            game_over[0] = True
            canvas.itemconfig(otter_id, image=game_window.otter_clam_img)
            canvas.coords(otter_id, 360, 260)
            canvas.delete(clam_id)
            for btn_id in option_button_ids:
                canvas.delete(btn_id)
            option_button_ids.clear()
            canvas.delete(buttons_window)
            answer_buttons_frame.destroy()
            if question_window_id[0]:
                canvas.delete(question_window_id[0])
            elapsed = time.time() - start_time

# Remove old stopwatch and feedback
            canvas.delete(stopwatch_id)
            canvas.itemconfig(feedback_id, text="You reached the clam! ü¶¶üêö", fill="darkgreen")

            # Show large "Final Time" text above otter
            final_time_text = canvas.create_text(
                450, 180,  # y-position moved higher to be above otter
                text=f"Final Time: {elapsed:.1f}s",
                font=("Arial", 30, "bold"),
                fill="black"
            )

            save_score(username, elapsed)

        else:
            game_window.after(1000, show_question)

    def show_question():
        if game_over[0]:
            return
        if question_window_id[0]:
            canvas.delete(question_window_id[0])
            question_window_id[0] = None
        for btn_id in option_button_ids:
            canvas.delete(btn_id)
        option_button_ids.clear()
        for widget in answer_buttons_frame.winfo_children():
            widget.destroy()

        q = generate_question()
        question_window_id[0] = canvas.create_text(450, 150, text=q["question"], font=("Arial", 24), fill="black")

        positions = [(350, 300), (500, 300), (350, 360), (500, 360)]
        for index, choice in enumerate(q["options"]):
            x, y = positions[index]
            btn = tk.Button(game_window, text=choice, font=("Arial", 16), width=10, bg="#d1f3fc",
                            command=lambda c=choice: check_answer(c, q["answer"]))
            btn_id = canvas.create_window(x, y, window=btn)
            option_button_ids.append(btn_id)

    def update_stopwatch():
        if game_over[0]:
            return
        elapsed = time.time() - start_time
        canvas.itemconfig(stopwatch_id, text=f"Time: {elapsed:.1f}s")
        game_window.after(100, update_stopwatch)

    quit_btn = tk.Button(game_window, bg="#d1f3fc", text="Quit", font=("Georgia", 12),
                        command=lambda: (game_window.destroy(), root.deiconify()))
    canvas.create_window(820, 30, window=quit_btn)

    show_question()
    update_stopwatch()


canvas = tk.Canvas(root, width=400, height=500, highlightthickness=0)
canvas.place(x=0, y=0)

bg_image = Image.open("bg_clams.png").resize((400, 650))
bg_photo = ImageTk.PhotoImage(bg_image)
canvas.create_image(0, 0, image=bg_photo, anchor="nw")

canvas.create_text(200, 80, text="OH! CLAM", font=("Georgia", 40, "bold"), fill="#3f6f7d")
canvas.create_text(200, 160, text="Username", font=("Segoe Print", 15, "bold"), fill="#24424c")
canvas.create_text(200, 240, text="Difficulty", font=("Segoe Print", 15, "bold"), fill="#24424c")

entry = tk.Entry(root, width=15, font=("", 14))
entry.place(x=120, y=180)

tk.Button(root, bg="#d1f3fc", text="Easy", width=8, font=("Georgia", 14), command=lambda: open_game_level("Easy", easy_questions)).place(x=150, y=260)
tk.Button(root, bg="#d1f3fc", text="Medium", width=8, font=("Georgia", 14), command=lambda: open_game_level("Medium", medium_questions)).place(x=150, y=300)
tk.Button(root, bg="#d1f3fc", text="Hard", width=8, font=("Georgia", 14), command=lambda: open_game_level("Hard", hard_questions)).place(x=150, y=340)
tk.Button(root, bg="#d1f3fc", text="Info", width=8, font=("Georgia", 14), command=open_info).place(x=20, y=440)
tk.Button(root, bg="#d1f3fc", text="Quit", width=8, font=("Georgia", 14), command=quit_app).place(x=280, y=440)
tk.Button(root, bg="#d1f3fc", text="Scoreboard", width=8, font=("Georgia", 14), command=open_scoreboard).place(x=150, y=440)

root.mainloop()
