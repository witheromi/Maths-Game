# OH! Clam Maths Game
#Date:22/07/25
#Purpose: To create a simplke maths gaem targeted at Lynfield students
# Author: Naomi Ching

import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import random
import time
import os


#This is so windows don't appear in it's default place but at certain parts of the screen to look better
def center_window(win, width, height):
    screen_width = root.winfo_screenwidth()
    screen_height =root.winfo_screenheight()
    
    x = (screen_width / 2) - (width / 2)
    y = (screen_height / 2) - (height / 2)
    win.geometry(f"{width}x{height}+{int(x)}+{int(y)}")

#Creates the main menu of the game
root = tk.Tk()
#Titling the window
root.title("OH Clam!")
#Put the main menu at the center of the screen with a size of 400x500
center_window(root, 400, 500)
#Makes sure users can not resize the window at all 
root.resizable(False, False)



#Function to quit the game
def quit_app():
    if messagebox.askokcancel("Quit", "Do you really want to quit?"):
        root.destroy()#Destroys main menu and program stops running

#Function to open the info window
def open_info():
    info_window = tk.Toplevel(root)
    info_window.title("About the Game")
    #The size of the window is 500x110 while the positioning of the screen is x=240 while y=290
    info_window.geometry("500x110+240+290")
    info_window.resizable(False, False)

#Creates a canvas inside the information window   
    canvas = tk.Canvas(info_window, width=500, height=130)
    canvas.pack(fill="both", expand=True)

#Displays the main menu's background image with resizing it 
    bg_image = Image.open("bg_clams.png").resize((550, 500))
    bg_photo = ImageTk.PhotoImage(bg_image)
    canvas.create_image(0, 0, image=bg_photo, anchor="nw")
#Makes sure photo will alway be shown 
    info_window.bg_photo = bg_photo

    #Message text explaining how my game works 
    message = (
        "OH!Clam is a fun maths game that focuses on substitution problems."
        " There are three difficulties to choose from: Easy, Medium and Hard."
        " Answer 10 questions as fast as you can to reach the clam! Have fun!🦦"
    )
    #Creating the message on a canvas as I don't like the weird white background behind the words
    canvas.create_text(
        10, 10,
        anchor="nw",
        text=message,
        font=("Segoe UI", 13),
        fill="Black",  
        width=480#Makes sure the words do not surpass this point so all words can be seen 
    )
    #Close button for users to be able to exit the info window easily and get back to the main menu
    quit_button = tk.Button(info_window, bg="#d1f3fc", text="Close", font=("Georgia", 9), command=info_window.destroy)
    quit_button.place(x=430, y=80)
    
#Saving users score to a text file
def save_score(username, elapsed_time, difficulty):
    with open("scoreboard.txt", "a") as file:
        file.write(f"{username},{elapsed_time:.1f},{difficulty}\n")#Write the username, time rounded to 1 d.p, and difficulty level
    
#Function for the scoreboard to be shown 
def open_scoreboard():
    scoreboard_window = tk.Toplevel(root)
    scoreboard_window.title("Leaderboard")
    scoreboard_window.geometry("500x300+1180+290") 
    scoreboard_window.resizable(False, False)

#Creating another canvas so texts don't have the weird background again
    canvas = tk.Canvas(scoreboard_window, width=500, height=300)
    canvas.pack(fill="both", expand=True)
#Background image for the leaderboard    
    bg_image = Image.open("bg_clams.png").resize((500, 400))
    bg_photo = ImageTk.PhotoImage(bg_image)
    canvas.create_image(0, 0, image=bg_photo, anchor="nw")
    scoreboard_window.bg_photo = bg_photo
#Column headers for the leaderboard 
    canvas.create_text(100, 30, text="Username", font=("Segoe Print", 17, "bold"), fill="#24424c")
    canvas.create_text(250, 30, text="Time (s)", font=("Segoe Print", 17, "bold"), fill="#24424c")
    canvas.create_text(400, 30, text="Difficulty", font=("Segoe Print", 17, "bold"), fill="#24424c")

#If a scoreboard file exists, it will read and display the top 10 scores for the game
    if os.path.exists("scoreboard.txt"):
        with open("scoreboard.txt", "r") as file:
            lines = file.readlines()
            scores = []
            for line in lines:
                try:
                    #This splits the lines into usernames, time and difficulty for each "," there is a space
                    name, t, diff = line.strip().split(",")
                    scores.append((name, float(t), diff))
                except:
                    continue
            #Sorting the scores by time 
            scores.sort(key=lambda x: x[1])
            #Displays the top 10 scores of the game 
            for i, (name, t, diff) in enumerate(scores[:10]):
                canvas.create_text(100, 60 + i * 20, text=name, font=("Arial", 12), fill="#24424c")
                canvas.create_text(250, 60 + i * 20, text=f"{t:.1f}s", font=("Arial", 12), fill="#24424c")
                canvas.create_text(400, 60 + i * 20, text=diff, font=("Arial", 12), fill="#24424c")

    #Creates close button to exit the leaqderboard window
    quit_button = tk.Button(scoreboard_window, bg="#d1f3fc", text="Close", font=("Georgia", 12), command=scoreboard_window.destroy)
    quit_button.place(x=400, y=260)

#Generated questions for easy level
easy_questions = [
    ("What is 2x + 3 when x = {x}?", lambda x: 2 * x + 3),
    ("What is x - 4 when x = {x}?", lambda x: x - 4),
    ("What is 3x - 7 when x = {x}?", lambda x: 3 * x - 7),
    ("What is x + 2 when x = {x}?", lambda x: x  + 2),
    ("What is 4x - x when x = {x}?", lambda x: 4 * x - x),
]
#Generated questions for easy level
medium_questions = [
    ("What is 5x + 2 when x = {x}?", lambda x: 5 * x + 2),
    ("What is 3x² + x when x = {x}?", lambda x: x ** 2 + x),
    ("What is 6x² + 12 when x = {x}?", lambda x: 6 * x**2 + 12),
    ("What is 3x + 9 when x = {x}?", lambda x: 3 * x + 9),
    ("What is 4x² - 1 when x = {x}?", lambda x: 4 * x ** 2 - 1),
]

#Generated questions for easy level
hard_questions = [
    ("What is x³ + 2x when x = {x}?", lambda x: x**3 + 2*x),
    ("What is 3x² - x + 1 when x = {x}?", lambda x: 3*x**2 - x + 1),
    ("What is 2x² + 5x when x = {x}?", lambda x: 2*x**2 + 5*x),
    ("What is x² - 4x + 4 when x = {x}?", lambda x: x**2 - 4*x + 4),
    ("What is (x + 2)(x - 3) when x = {x}?", lambda x: (x + 2)*(x - 3)),
]



def open_game_level(level_name, question_templates, difficulty):
    #Removes any extra spaces
    username = entry.get().strip()

#If username is empty shows an error message 
    if not username:
        messagebox.showerror("No Username", "Please enter a username to start.")
        return
#Hides main window when game is opened
    root.withdraw()
    game_window = tk.Toplevel(root)
    game_window.title(f"{level_name} Level")#Whichever level the user is doing set the title to the name of the difficulty
    center_window(game_window, 900, 600)
    game_window.resizable(False, False)

    canvas = tk.Canvas(game_window, width=900, height=600)
    canvas.pack(fill="both", expand=True)

    bg_image = Image.open("Background_2.png").resize((900, 600))
    bg_photo = ImageTk.PhotoImage(bg_image)
    canvas.create_image(0, 0, image=bg_photo, anchor="nw")
    game_window.bg_photo = bg_photo
#Loads the images of the otter swimming, the clam and the otter holding the clam once the user has bet the game
    game_window.otter_swim_img = ImageTk.PhotoImage(Image.open("otter_swimming.png").resize((150, 150)))
    game_window.clam_img = ImageTk.PhotoImage(Image.open("clam.png").resize((150, 150)))
    game_window.otter_clam_img = ImageTk.PhotoImage(Image.open("otter_holding_clam.png").resize((200, 250)))
#This is the initial position of the otter
    otter_x = 50
    otter_y = 450
#The otter image is on the canvas at the starting position 
    otter_id = canvas.create_image(otter_x, otter_y, image=game_window.otter_swim_img, anchor="nw")
#Same for the clam image but at the right hand side 
    clam_id = canvas.create_image(760, otter_y, image=game_window.clam_img, anchor="nw")
    
#Function for when the otter moves 
    def move_otter():
        nonlocal otter_x, otter_y
        otter_x += 75 #Moves the otter 75 pixels to the right 
        canvas.coords(otter_id, otter_x, otter_y)#Updates the otter image position   
    #Makes sure to record the time as the game starts 
    start_time = time.time()
    #Another canvas so the stopwatch timer can be displayed on top
    stopwatch_id = canvas.create_text(450, 30, text="Time: 0.0s", font=("Berlin Sans FB", 18), fill="black")

    game_over = [False]
    #Counts amount of correct answers users have given 
    correct_count = [0]

    feedback_id = canvas.create_text(450, 550, text="", font=("Arial", 18), fill="")
    answer_buttons_frame = tk.Frame(game_window, bg="white")
    buttons_window = canvas.create_window(450, 350, window=answer_buttons_frame)
    question_window_id = [None]
    option_button_ids = []

    def generate_question():
        #This will randmomly pick a question template 
        template, func = random.choice(question_templates)
        #This will choose a random integer from 1 to 5 for x
        x = random.randint(1, 5)
        #Calculates the correct answer by applying the function to x
        correct = func(x)

        #If answers are floats, round it to a decimal place if not keep it as is
        correct_rounded = round(correct, 1) if isinstance(correct, float) else correct
        options = [correct_rounded]
        #Makes sure to generate 4 different options 
        while len(options) < 4:
            #Chooses a small difference to create the wrong answer options
            difference = random.choice([-3, -2, -1, 1, 2, 3])
            #Creates a wrong anser by adding the difference to the correct answer
            wrong_answer = correct_rounded + difference
            #Only add the wrong anwer if it is not already in the options list
            if wrong_answer not in options:
                options.append(wrong_answer)
        #Shuffle the options list so the correct answer isn't always in the sam position 
        random.shuffle(options)
         
        return {
            "question": template.format(x=x),
            "options": [str(round(opt, 1)) for opt in options],
            "answer": str(correct_rounded)
        }

    def check_answer(selected, correct):
        if game_over[0]:
            return
        #Check to see if the selected option if correct
        if selected == correct:
            #Increase count of correct answers
            correct_count[0] += 1
            #Displays correct for users to see
            canvas.itemconfig(feedback_id, text="Correct!", fill="#144e63")
            #Moves the otter closer by 75 pixels each time to the right 
            move_otter()
        else:
            #If option was wrong display with correct answer
            canvas.itemconfig(feedback_id, text=f"Wrong! Answer was {correct}", fill="#144e63")
        #If player has answered 10 questions correctly 
        if correct_count[0] >= 10:
            #Game is over 
            game_over[0] = True
            #Reposition the otter image near the centre
            canvas.itemconfig(otter_id, image=game_window.otter_clam_img)
            canvas.coords(otter_id, 360, 260)
            #Deletes the clam image from the game window
            canvas.delete(clam_id)
            #Remove all buttons from the game window 
            for btn_id in option_button_ids:
                canvas.delete(btn_id)
            option_button_ids.clear()
            canvas.delete(buttons_window)
            answer_buttons_frame.destroy()
            #Remove the question text 
            if question_window_id[0]:
                canvas.delete(question_window_id[0])
            #Calculated the elapsed time since the start of the game 
            elapsed = time.time() - start_time

            #Removes the stopwatch at the top 
            canvas.delete(stopwatch_id)
            #New message shown and congratulating the user for reaching the clam
            canvas.itemconfig(feedback_id, text="You reached the clam! 🦦🐚", fill="#144e63")

            #Displays the final time above the otter image 
            final_time_text = canvas.create_text(
                450, 180,
                text=f"Final Time: {elapsed:.1f}s",
                font=("Arial", 30, "bold"),
                fill="black"
            )
#Saves the players usernmae, time and difficulty level for the scoreboard
            save_score(username, elapsed, difficulty)
#If the game is not over, wait then show the next question 
        else:
            game_window.after(1000, show_question)

    def show_question():
        if game_over[0]:#If game is over do not show next question
            return
        #If a question text already exists on the screen delete it 
        if question_window_id[0]:
            canvas.delete(question_window_id[0])
            question_window_id[0] = None
        #Deletes any buttons as well from the canvas
        for btn_id in option_button_ids:
            canvas.delete(btn_id)
        option_button_ids.clear()
        #Destroys the widgets inside the frame holding the answer buttons as well 
        for widget in answer_buttons_frame.winfo_children():
            widget.destroy()
        #Generates a new question again
        questions = generate_question()
        #Question is displayed centered but up a bit 
        question_window_id[0] = canvas.create_text(450, 150, text=questions["question"], font=("Berlin Sans FB", 45), fill="#144e63")
        #Positions for each answer button 
        positions = [(350, 300), (500, 300), (350, 360), (500, 360)]
        #Creates and places a button for each option 
        for index, choice in enumerate(questions["options"]):
            x, y = positions[index]
            #The lambda is used to bind the current choice to the command to check if the answer is right or not
            btn = tk.Button(game_window, text=choice, font=("Arial", 16), width=10, bg="#d1f3fc",
                            command=lambda c=choice: check_answer(c, questions["answer"]))
        
            btn_id = canvas.create_window(x, y, window=btn)
            option_button_ids.append(btn_id)

    def update_stopwatch():
        if game_over[0]:#If game is over stop the stopwatch
            return
        #Calculate time since the game started
        elapsed = time.time() - start_time
        #Put the time to 1 d.p
        canvas.itemconfig(stopwatch_id, text=f"Time: {elapsed:.1f}s")
        game_window.after(100, update_stopwatch)
    #Quit button with while destroys the game window and re shows the main menu again
    quit_btn = tk.Button(game_window, bg="#d1f3fc", text="Quit", font=("Georgia", 12),
                        command=lambda: (game_window.destroy(), root.deiconify()))
    canvas.create_window(820, 30, window=quit_btn)
    #Calls funtion to start the game 
    show_question()#Display the first question 
    update_stopwatch()#Starts the stopwatch 

def validate_username_input(input_text):
    #Allow alphabetic characters and spaces as well as 20 characters maximum
    if (all(char.isalpha() or char.isspace() for char in input_text) or input_text == "") and len(input_text)<=20:
        return True
    return False
#Validation function to use for the entry widget
validate_number = root.register(validate_username_input)
#Creates a canvas for the background for the main menu 
canvas = tk.Canvas(root, width=400, height=500, highlightthickness=0)
canvas.place(x=0, y=0)
#Displays background image 
bg_image = Image.open("bg_clams.png").resize((400, 650))
bg_photo = ImageTk.PhotoImage(bg_image)
canvas.create_image(0, 0, image=bg_photo, anchor="nw")
#Displays the title and labels on the canvas made 
canvas.create_text(200, 80, text="OH! CLAM", font=("Georgia", 40, "bold"), fill="#3f6f7d")
canvas.create_text(200, 160, text="Username", font=("Segoe Print", 15, "bold"), fill="#24424c")
canvas.create_text(200, 240, text="Difficulty", font=("Segoe Print", 15, "bold"), fill="#24424c")
#Entry widget for the username with the validation 
entry = tk.Entry(root, width=15, font=("Georgia", 12), validate="key", validatecommand=(validate_number, "%P" ))
entry.place(x=120, y=180)
#Buttons to select difficulty levels, commands them to open the levels made for them
tk.Button(root, bg="#d1f3fc", text="Easy", width=8, font=("Georgia", 14), command=lambda: open_game_level("Easy", easy_questions, "Easy")).place(x=150, y=260)
tk.Button(root, bg="#d1f3fc", text="Medium", width=8, font=("Georgia", 14), command=lambda: open_game_level("Medium", medium_questions, "Medium")).place(x=150, y=300)
tk.Button(root, bg="#d1f3fc", text="Hard", width=8, font=("Georgia", 14), command=lambda: open_game_level("Hard", hard_questions, "Hard")).place(x=150, y=340)
#Main menu buttons
tk.Button(root, bg="#d1f3fc", text="Info", width=8, font=("Georgia", 14), command=open_info).place(x=20, y=440)
tk.Button(root, bg="#d1f3fc", text="Quit", width=8, font=("Georgia", 14), command=quit_app).place(x=280, y=440)
tk.Button(root, bg="#d1f3fc", text="Leader board", width=10, font=("Georgia", 14), command=open_scoreboard).place(x=140, y=440)

root.mainloop()
